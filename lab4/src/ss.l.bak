%{
    #include <stdio.h>
%}

%option yylineno
%option header-file="lex.yy.h"

TYPE int|float|void
RETURN return
IF if
ELSE else
WHILE while
PLUS \+
MINUS -
INT [1-9]+[0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+
FLOAT   [0-9]+\.[0-9]*  
ID [a-z_A-Z][a-zA-Z_0-9]*
SPACE [ \t\r]*
EOL \n
SEMI ;
COMMA ,
ASSIGN =
RELOP >|<|>=|<=|==|!=
STAR \*
DIV \/
AND &&
OR \|\|
DOT \.
NOT !
LP \(
RP \)
LB \[
RB \]
LC \{
RC \}
ERROR .

%%

{SPACE}    { /* 忽略空白字符 */ }
{EOL}      { /* 忽略换行符 */ }

"//"  {
      char c = input(); 
      while (c != '\n') 
      c = input(); 
    }

"/*"  {
      char c = input(); 
      while (c != '*' || (c = input()) != '/') 
      c = input(); 
    }

{SEMI}     { printf("SEMI \t%s\n", yytext); }
{COMMA}    { printf("COMMA \t%s\n", yytext); }
{ASSIGN}   { printf("ASSIGN \t%s\n", yytext); }
{RELOP}    { printf("RELOP \t%s\n", yytext); }
{STAR}     { printf("STAR \t%s\n", yytext); }
{DIV}      { printf("DIV \t%s\n", yytext); }
{AND}      { printf("AND \t%s\n", yytext); }
{OR}       { printf("OR \t%s\n", yytext); }
{DOT}      { printf("DOT \t%s\n", yytext); }
{NOT}      { printf("NOT \t%s\n", yytext); }
{LP}       { printf("LP \t%s\n", yytext); }
{RP}       { printf("RP \t%s\n", yytext); }
{LB}       { printf("LB \t%s\n", yytext); }
{RB}       { printf("RB \t%s\n", yytext); }
{LC}       { printf("LC \t%s\n", yytext); }
{RC}       { printf("RC \t%s\n", yytext); }
{TYPE}     { printf("TYPE \t%s\n", yytext); }
{RETURN}   { printf("RETURN \t%s\n", yytext); }
{IF}       { printf("IF \t%s\n", yytext); }
{ELSE}     { printf("ELSE \t%s\n", yytext); }
{WHILE}    { printf("WHILE \t%s\n", yytext); }
{PLUS}     { printf("PLUS \t%s\n", yytext); }
{MINUS}    { printf("MINUS \t%s\n", yytext); }

{INT}  {
        int value;
        if (yytext[0] == '0' && (yytext[1] == 'x' || yytext[1] == 'X'))
            sscanf(yytext, "%x", &value);
        else if (yytext[0] == '0')
            sscanf(yytext, "%o", &value);
        else
            sscanf(yytext, "%d", &value);
        printf("INT \t%d\n", value);
    }

{FLOAT}    { printf("FLOAT \t%s\n", yytext); }
{ID}       { printf("ID \t%s\n", yytext); }
{ERROR}    { printf("Error type A at Line %d: Invalid characters \'%s\'\n", yylineno, yytext); }

%%

int yywrap(void) {
    return 1;
}

